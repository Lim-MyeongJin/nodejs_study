/*1
우리가 프로그래밍을 한다라는 것은 크개 두 가지로 이루어져있다고 볼 수 있습니다.
하나는 데이터, 또 하나는 데이터를 처리하는 것 이 두 가지로 이루어져 있습니다. 
데이터를 사용하기 좋게 복잡하기 않게 잘 정리정돈 해주는 도구가 뭐가 있었죠. 배열,객체가 있었습니다.
그리고 자바스크립트에서 처리해야하는 코드가 많아지면 서로 연관된 것끼리 그룹핑하기 위해 뭘 사용할 수 있나면 
함수를 사용할 수 있습니다.
*/

/*2
//만약 서로 연관된 작업이라면 이렇게 f1라는 이름의 함수로 묶을 수 있는 거죠.
//그런데 자바스크립트에서 함수는 어떤 특이한 특성을 가지고 있는데 함수는 처리해야 될 일에 대한
//정보를 담고 있는 구문이라고 할 수 있으면서 동시에 값으로 표현될 수 있습니다.
//쉽게 얘기하자면 이 함수를 변수에 넣을 수 있다면 값이고 못넣는다면 값이 아닌거에요.
function f1(){
    console.log('A');
    console.log('B');
}
*/

/*3
예를 들어서 if문의 구조를 a변수에 대입한다면 저장이 될까요? while문 구조를 저장하면 될까요?
에러가 나는거죠. 즉 값이 될 수 없습니다.
*/
// var a = if(true){console.log('A');}

// var a = while(true){console.log('A');}

/*4
 그럼 f1이라는 함수는 값이 될 수 있을까요? f1이라는 이름을 삭제하고 f라는 변수에 담아봅시다.
 실행하면 오류가 나지 않습니다. 즉, 함수는 값이 될 수 있다는 거죠. 이것이 우리가 꼭 기억해야 될 부분입니다.
 그래서 함수는 변수의 값이 될수도, 배열, 객체의 값으로도 얼마든지 사용할 수가 있습니다.
 */
var f = function(){
    console.log('A');
    console.log('B');
}

console.log(f);
f();

var f = function(){
    console.log('A');
    console.log('B');
}

var a = [f];
a[0]();

var f = function(){
    console.log('A');
    console.log('B');
}

var o = {
    func:f
}
o.func();
